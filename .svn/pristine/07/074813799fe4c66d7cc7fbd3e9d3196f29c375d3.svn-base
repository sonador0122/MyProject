package main;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import twitter4j.Status;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.User;
import twitter4j.auth.AccessToken;
import twitter4j.auth.RequestToken;
import dao.AdminMemberDAO;
import dao.MemberDAO;
import dto.MemberDTO;

@Controller
public class twitter4jTest01 {
	private Log log = LogFactory.getLog(this.getClass());
	
	@Autowired
	@Qualifier("member")
	MemberDAO dao;
	@Autowired
	@Qualifier("admindao")
	AdminMemberDAO admin;
	// public final String CONSUMER_KEY = "gt3NgKeJp0KkGILFbaAqu6lPc";
	// public final String CONSUMER_SECRET =
	// "z2rtrvAs9GsnUKSrE29cizRc0sHiYhz11NDMpJ5xmBpIC6ZKLj";
	
	@RequestMapping("/twitter.do")
	public String showtwitter() {
		return "twitter";
	}

	@RequestMapping("/twitter1.do")
	public ModelAndView twitter(HttpSession session) throws IOException,
			ServletException, TwitterException {
		System.out.println("들어는 왔니?");

		Twitter twitter = new TwitterFactory().getInstance();
		// twitter.setOAuthConsumer("gt3NgKeJp0KkGILFbaAqu6lPc",
		// "z2rtrvAs9GsnUKSrE29cizRc0sHiYhz11NDMpJ5xmBpIC6ZKLj");
		RequestToken requestToken = null;
		requestToken = twitter.getOAuthRequestToken();
		// 인증절차 2단계에서 Secret값을 비교하기 위해 session에 token값 등록
		session.setAttribute("twitter", twitter);
		session.setAttribute("requestToken", requestToken);
		

		session.setAttribute("requestTokenSecret",
				requestToken.getTokenSecret());
		System.out.println("requestToken=>" + requestToken.getToken());
		System.out.println("requestToken.getAuthorizationURL=>"
				+ requestToken.getAuthorizationURL());
		session.setAttribute("requestToken.getAuthorizationURL",
				requestToken.getAuthorizationURL());
		// 트위터측 인증페이지로 리다이렉팅 - 인증절차 2단계에서 인증성공하면 콜백페이지로 리다이렉팅
		
		return new ModelAndView("redirect:"
				+ requestToken.getAuthorizationURL());

	}

	@RequestMapping("/twittercallback.do")
	public ModelAndView callback(HttpServletRequest request, ModelMap model,
			HttpSession session) throws IOException, ServletException,
			TwitterException {
		try {
			System.out.println("twittercallback.do들어왔다.");

			Twitter twitter = new TwitterFactory().getInstance();
			AccessToken accessToken = null;
			RequestToken requestToken = (RequestToken) request.getSession()
					.getAttribute("requestToken");
			String oauthToken = request.getParameter("oauth_token").toString();
			
			System.out.println("oauthToken===>" + oauthToken);
			String tokenSecret = (String) session
					.getAttribute("requestTokenSecret");

			System.out.println("콜백 토큰  :: " + requestToken);
			session.setAttribute("requestToken", requestToken);
			System.out.println("콜백 토큰시크릿  ::  " + tokenSecret);
			String oauth_verifier = request.getParameter("oauth_verifier");

			accessToken = twitter.getOAuthAccessToken(requestToken,
					oauth_verifier);
			twitter.setOAuthAccessToken(accessToken);

			session.setAttribute("aToken", accessToken.getToken()); // 실제론디비에넣자
			session.setAttribute("accessToken", accessToken);
			session.setAttribute("aTokenSecret", accessToken.getTokenSecret()); // 실제론디비에넣자
			request.setAttribute("oauthToken", oauthToken);
			request.setAttribute("oauthVerifier", oauth_verifier);			session.setAttribute("oauthverifier", oauth_verifier);
			System.out.println("엑세스토큰 :: " + accessToken.getToken());
			
			System.out.println("엑세스토큰 :: " + twitter.getOAuthAccessToken());
			System.out.println("엑세스토큰시크릿 :: " + accessToken.getTokenSecret());
			User statuses = twitter.getUserTimeline().get(0).getUser();
			System.out.println(statuses);
			String id=twitter.showUser(accessToken.getScreenName()).getId()+"";
			System.out.println("트위터 id===>"+id);
			String name=twitter.showUser(accessToken.getScreenName()).getScreenName().toString();
			System.out.println("트위터 이름==>"+name);
			String img=twitter.showUser(accessToken.getScreenName()).getOriginalProfileImageURL().toString();
			int user_num=0;
			if(id.equals(dao.member_userid(id))){
				System.out.println("넌 이미 등록되어 있다.");
				
			}else{
				MemberDTO dto=new MemberDTO("t",id,name,img);
				dao.member_insert(dto);
				System.out.println("insert됬음????");
				
			}
			MemberDTO dto = new MemberDTO("t",id);
			user_num=dao.member_user_num(dto);
			System.out.println("user_num===>"+user_num);
			String struser_num=Integer.toString(user_num);
			System.out.println("struser_num=="+struser_num);
			boolean conf = admin.searchVisits(struser_num);
			
			if(!conf){
				admin.insertVisits(struser_num);
				System.out.println("들어는 오니?");
			}
			
			session.setAttribute("user_num", user_num);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("redirect:index.do");
	}

	@RequestMapping("/sign.do")
	public ModelAndView showsign() {
		return new ModelAndView("test/sign");
	}

	@RequestMapping("/twitterlogout.do")
	public ModelAndView logout(HttpServletRequest request,
			HttpServletResponse response) {
		ModelAndView mav = new ModelAndView();
		Twitter twitter = (Twitter)request.getSession().getAttribute("twitter");
		twitter.setOAuthAccessToken(null);
		request.getSession().invalidate();
		mav.setViewName("redirect:index.do");
		return mav;
	}
	@RequestMapping("/twitterstatus.do")
	public ModelAndView status(HttpServletRequest request, ModelMap model,
			HttpSession session)throws IOException, ServletException,
			TwitterException {
		

		Twitter twitter1=(Twitter)request.getSession().getAttribute("twitter");
		Status status = null;
		AccessToken access=(AccessToken)session.getAttribute("accessToken");
		twitter1.setOAuthAccessToken(access);
		//twitter1.setOAuthConsumer("gt3NgKeJp0KkGILFbaAqu6lPc", "z2rtrvAs9GsnUKSrE29cizRc0sHiYhz11NDMpJ5xmBpIC6ZKLj");
		//Twitter twitter=new TwitterFactory().getInstance(); 
		//System.out.println("accessToken=>"+session.getAttribute("aToken"));
		//AccessToken accessToken = null;
		//RequestToken requestToken=(RequestToken)session.getAttribute("requestToken");
/*		String oauthverifier=(String)session.getAttribute("oauthverifier");
		accessToken = new AccessToken(requestToken+"", oauthverifier);
		twitter1.setOAuthAccessToken(accessToken);*/
	//	System.out.println("accessToken==>"+accessToken);
		 //AccessToken accessToken = (AccessToken)session.getAttribute("aToken");

			//twitter.setOAuthAccessToken(session.getAttribute("aToken"));
				 // new TwitterFactory().getInstance();

		  //twitter.setOAuthConsumer(session.getAttribute("aToken") + "",((AccessToken)session.getAttribute("aToken")).getTokenSecret());
		 
		
		try {
			SimpleDateFormat mSimpleDateFormat = new SimpleDateFormat ( "yyyy.MM.dd HH:mm:ss", Locale.KOREA );
			Date currentTime = new Date ( );
			String mTime = mSimpleDateFormat.format ( currentTime );
			System.out.println ( mTime );
			
			status = twitter1.updateStatus("http://localhost:8088/Eden/index.do ["+mTime+"] Eden에 소중한 기부금 감사합니다");// 여기다가 실제로
																// 트위터에 넣을
																// 데이터를
																// 삽입한다.
			System.out.println("트윗성공");

		} catch (TwitterException e) {
			System.out.println("에러 :: " + e);
			e.printStackTrace();
		}

		return new ModelAndView("redirect:side_support.do");
	}
}
